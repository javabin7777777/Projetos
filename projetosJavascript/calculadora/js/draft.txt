/*
    document.getElementById('tan').addEventListener('click', () => generic('tan'));
    document.getElementById('cos').addEventListener('click', () => generic('cos'));
    document.getElementById('sen').addEventListener('click', () => generic('sin'));
    document.getElementById('pow2').addEventListener('click', () => generic('pow2'));
    document.getElementById('pi').addEventListener('click', () => generic('pi'));
    document.getElementById('euler').addEventListener('click', () => generic('euler'));
    document.getElementById('clearText').addEventListener('click', () => generic('ctt'));
    document.getElementById('inverse').addEventListener('click', () => generic('inv'));
    document.getElementById('root').addEventListener('click', () => generic('root'));
    document.getElementById('squareRoot').addEventListener('click', () => generic('squareRoot'));
    document.getElementById('percentage').addEventListener('click', () => generic('%'));
    document.getElementById('real').addEventListener('click', () => generic('real'));
    document.getElementById('pow').addEventListener('click', () => generic('pow'));
    document.getElementById('ln').addEventListener('click', () => generic('ln'));
    document.getElementById('log').addEventListener('click', () => generic('log'));
    document.getElementById('fatorial').addEventListener('click', () => generic('fatorial'));
    document.getElementById('abs').addEventListener('click', () => generic('abs'));
    document.getElementById('mod').addEventListener('click', () => generic('mod'));
    */

/*

for (let index = 0; index <str.length; index++) {// Obter os dois valores(índice e radicando) da string de entrada.
               if(str[index]=='*' && str[index+1]=='*') {
                   str1=str.substring(0,index);
                   str2=str.substring(index+2,str.length);
                   break;
               }
           }
// alternância entre os caracteres :'(' e ')'.
function signBrackets() {
     // console.log(callCount2);
  let arr=[...input.value];
     //console.log(arr);
   if(callCount2%2==0) {
       arr.unshift('(');
       input.value=arr.join('');
   }
   else {
       arr.push(')');
       input.value=arr.join('');
   }
  ++callCount2;
}


not a number
function nAn() {
   input.value = 'not a number'.toUpperCase();
   lock();
}

function Euler() {
   input.value=Math.E;
}

function PI() {
   input.value=Math.PI;
}

function log(logaritmo) { // logaritmo decimal e natural
   if(validation()) {
       if(input.value.length!=0) {
           if(Number(input.value)<=0) {
               aux=input.value;
               messageError(message2);
               return false;
           }
       }else return false;
      // console.log(logaritmo);
       if(logaritmo) input.value=Number(Number(Math.log10(Number(input.value))).toFixed(DECIMAL));
       else input.value=Number(Number(Math.log(Number(input.value))).toFixed(DECIMAL));
   }
}

function sincos(angle) {
  // console.log(input.value);
   aux=input.value;
   if(validation()) {
       if(angle) {
           let number=Number( Math.sin(Number(input.value)*Math.PI/180).toFixed(DECIMAL) );
           if(!(Number.isNaN(number))) {
               messageError(message0);//Caso o valor de entrada é muito grande
               return;
           }
           input.value=number;
       }
       else {
           let number=Number( Math.cos(Number(input.value)*Math.PI/180).toFixed(DECIMAL) );
           if(!(Number.isNaN(number))) {
               messageError(message0);//caso o valor de entrada é muito grande.
               return;
           }
           input.value=number;
       }
   }else {
       messageError(message0);
       return false;
   }
   aux=input.value;//para memmory.
}


if(!((a&&(!b)&&c) || (a && b))) {
   nAn();
   console.log('aqui');
   return false;
}
a=algarism.includes(input.value[input.value.length-1]);// garante que o último caracter seja número .
b=input.value.startsWith('(');// string que inicia e finaliza com parênteses .
c=input.value.endsWith(')');
console.log(a);
console.log(b);
console.log(c);
if((a||(!b)||(!c)) && ((!a)||b||c)) {
   nAn();
   console.log('aqui');
   return false;
}

if(i!=input.value.length-1) {
switch(input.value[i]) {
   case'+':
       if( !(a && b) ) {
           // nAn();
           console.log('aqui');
           return false;
       };break;

   case'-':
       if( !(algarism.includes(input.value[i-1]) && (algarism.includes(input.value[i+1] || special_O.includes(input.value[i+1]))) ) ) {
           // nAn();
           console.log('aqui');
           return false;
       };break;

   case'/':
       if( !(algarism.includes(input.value[i-1]) && (algarism.includes(input.value[i+1]) || special_O.includes(input.value[i+1])) ) ) {
           // nAn();
           console.log('aqui');
           return false;
       };break;

   case'*':
       if((input.value[i]=='*') && (input.value[i+1]=='*')) i+=1; // caracteres '**'
       else {
           if( !(algarism.includes(input.value[i-1]) && (algarism.includes(input.value[i+1]) || special_O.includes(input.value[i+1])) ) ) {
               //nAn();
               console.log('aqui');
               return false;
           }
       };break;
}

operator1.forEach( (item) => {
item.addEventListener('click',() => {
//array.push(item.innerText);
//A=input.value; // primeiro operando .
input.value = input.value + item.innerText;
//console.log(array);
});
//console.log(item);//<button class="operator1">+</button>
});

function Asterisk(argument) { // permitir '**' (operação potência e raiz) .
if(!(argument+1 > input.value.length-1)) {
if((input.value.charAt(argument) == '*' && input.value.charAt(argument+1) == '*')) {
   asteriskDouble=true;
   return false;
}
}else {
   if(!(algarism.includes(input.value.charAt(argument)))) { // garante que o último caracter seja número .
       nAn();
       return false;
   }
}

return true; // passou .
}

   let str=input.value[i]+input.value[i+1]+input.value[i+2];
   if(str.equals('***')) {
       nAn();
       console.log('aqui');
       return false;
   }

   str=input.value[i]+input.value[i+1];
   if(str.equals('**')) {
       if( !(algarism.includes(input.value[i-1]) && algarism.includes(input.value[i+2])) ){
           nAn();
           console.log('aqui');
           return false;
       }
   }
   ++asterisk1;
       if(asterisk1>1) {

       }
   else if(input.value[i]=='*') asterisk2+=1;

// achar e marcar os caracteres dobrados '**' para operações potência e raiz .
if(asteriskDouble) {
   for(let [index,i] of input.value.entries()) {
       if((index+1)<input.value.length-1){
           if(input.value.charAt(index) == '*' && input.value.charAt(index+1) == '*') {
               //asteriskDouble=false;
               idAsterisk_1=index;
               idAsterisk_2=index+1;
               //A.push(input.value.charAt(index));
               //A.push(input.value.charAt(index+1));
               break;
           }
       }
   }
}
// verificar todos caracteres de entrada.Exceto os caracteres '**',caso seja as operações potência ou raiz .
console.log(input.value);
for(let index=0;index<array.length;index++) {
       console.log(array[index]);
       console.log(index);
   if(permit.includes(array[index])) { // verificar se cada caracter é permitido .
       if(!(array[index] == '*' && array[index+1] == '*')) {// && asteriskDouble)) {
           if (A.includes(array[index])) { // verificar se existe caracter repetido,exceto número .
               if(!(algarism.includes(array[index]))) {
                   nAn();
                   return false;
               }
           }
           A.push(array[index]);
       }

   }else {
       console.log('aqui');
       nAn();
       return false;
   }
}

//console.log(A);
// A=[...input.value];
//console.log('A= '+A);
// return true;// passou

}


// A=[...input.value];
   caracteres 'e','E','+' bloqueados no campo texto se digitados pelo teclado .
   input.addEventListener('keypress',(e)=>{
   if(e.key === 'e'.toUpperCase() || e.key === '+') e.preventDefault();
});


for(let i of input.value){
   if(!Permit.includes(i)){
       return false;
   }
}
return true;


for(let i of input.value){
   if(!Permit.includes(i)){
       return false;
   }
}
return true;

// validação da expressão entrada .
function validation() {
for(let i of input.value){
   if(!Permit.includes(i)){
       return false;
   }
}
return true;
}


array.length=0;

let B=""; // segundo operando .
let array1 = [...input.value];
console.log(array1); // (4) ['8', '^', '-', '2']


console.log(A.length);
console.log(array1.indexOf(array1[A.length]) +1);//índice do último operando .
//obter o segundo operando B .
for(let i=array1.indexOf(array1[A.length])+1;i<array1.length;i++){
       B=B+array1[i];
}
//if(typeof(Number(A))!='number' && typeof(Number(B))!='number') return input.value='Not a number!';
console.log('A= '+ A);
console.log('B= '+B);
console.log(array1[A.length]);
console.log();
switch(array1[A.length]){ // selecionar o operador escolhido .
   case '+':input.value = (Number(A)+Number(B)).toFixed(DECIMAL);break;
   case '-':input.value = (Number(A)-Number(B)).toFixed(DECIMAL);break;
   case '*':input.value = (Number(A)*Number(B)).toFixed(DECIMAL);break;
   case '/':input.value = (Number(A)/Number(B)).toFixed(DECIMAL);break;
   case '^':input.value = (eval(A)**eval(B)).toFixed(DECIMAL);break; // potenciação
   case 'r': // raiz (índices inteiros ou decimais,positivos ou negativos) .
               if(Number(A) < 0 ){
                   if(Number(B)%2 != 0){
                       let num = eval(A)*(-1);
                       input.value = ((num ** (1/eval(B)))*(-1)).toFixed(DECIMAL);
                   }else input.value = 'There is no!';

               }else input.value = (eval(A) ** (1/eval(B))).toFixed(DECIMAL);
               break;




               console.log('PASSOU AQUI!');
               console.log(Number(A));
               console.log(Number(B));

               let index = 1/(Number(B));
               console.log(typeof(num));
               console.log(typeof(index));
               console.log(num);
               console.log(index);
               console.log((num) ** index);

               break;

}
A="";
//The Math.fround() static method returns the nearest 32-bit single precision float representation of a number.



function overLoad() {
input.style.color = "green";
input.style.fontweight ="bold";
input.value='OverLoad'.toUpperCase();
// desabilta o campo texto e os 'buttons' exceto 'button R' .
input.disabled = true;
buttons.forEach((item)=>{
   console.log(item);
   if(!item.innerText == 'R') item.disabled= true;
   console.log(item);
})
}


function signMinus() {
input.value=input.value+'-';
}
function signSlash() {
input.value=input.value+'/';
}

function getB() {
let B=""; // segundo operando .
let array1 = [...input.value];
   //obter o segundo operando .
for(let i=array.indexOf(array[A.length])+1;i<array.length;i++){
       B=B+array[i];
}
}

for(let i=0;i<input.length;i++){
   console.log(i);
   console.log(codepointAt(i));
   if( !(input.value.codepointAt(i) > 48 && input.value.codepointAt(i) < 56)){
       return true;
   }
}
return false;
}

function number0(){
   //buttonMinus.setAttribute("disabled",true);
   //buttonPlus.removeAttribute("disabled");
zero = 0;
input.value=input.value + zero;
if(equal){
   A=A.concat(zero.toString());
}
};

console.log(array);
console.log(A);
console.log(B);
console.log(typeof '+');
console.log(typeof Number('awesome'));

console.log(div);
calculator.js:19
<div id=​"containerButton">​…​</div>​

const elements = document.querySelectorAll('button');
//lista 'elements' : traz todos buttons em uma lista tipo NodeList.Não é array.
console.log(elements);
calculator.js:23
NodeList(15) [button, button, button, button, button, button, button, button,
button, button, button, button, button, button, button]0: button1: button2: button3: button4:
button5: button6: button7: button8: button9: button10: button11: button12: button13: button14:
buttonlength: 15[[Prototype]]: NodeListentries: ƒ entries()forEach: ƒ forEach()item: ƒ item()keys: ƒ keys()length: (...)values: ƒ values()constructor: ƒ NodeList()Symbol(Symbol.iterator): ƒ values()Symbol(Symbol.toStringTag): "NodeList"get length: ƒ length()[[Prototype]]: Object

calculator.js:24 <button onclick=​"equalSign()​">​=​</button>​

let all=elements.entries();
// cada elemento de 'all' é um array,e este array tem dois elementos,o primeiro(0) é posição da lista
// 'elements',segundo(1) é o elemento da lista 'elements'
for (let i of all){
console.log(i);
console.log(i[1].innerText);
}

calculator.js:27 (2) [0, button]
calculator.js:28 0
calculator.js:27 (2) [1, button]
calculator.js:28 1
calculator.js:27 (2) [2, button]
calculator.js:28 2
calculator.js:27 (2) [3, button]
calculator.js:28 3
calculator.js:27 (2) [4, button]
calculator.js:28 4
calculator.js:27 (2) [5, button]
calculator.js:28 5
calculator.js:27 (2) [6, button]
calculator.js:28 6
calculator.js:27 (2) [7, button]
calculator.js:28 7
calculator.js:27 (2) [8, button]
calculator.js:28 8
calculator.js:27 (2) [9, button]
calculator.js:28 9
calculator.js:27 (2) [10, button]
calculator.js:28 +
calculator.js:27 (2) [11, button]
calculator.js:28 -
calculator.js:27 (2) [12, button]
calculator.js:28 *
calculator.js:27 (2) [13, button]
calculator.js:28 /
calculator.js:27 (2) [14, button]
calculator.js:28 =0)


//console.log(div);

const buttoMenos= document.querySelector("#buttonMenos");
//console.log(parseInt(num.value,10));
function cronous(){
// console.log(num.value);
let numero = ['0','1','2','3','4','5','6','7','8','9','-']; // caracteres aceitos na entrada
// console.log(numero);
let array=[];
array=(num.value).split(""); // correponde o valor de entrada
   //console.log(array);
if ( validacao(array,numero) ){ //validação do valor de entrada
   aux=0;
   tempo=Math.abs(parseInt(num.value));
   if (tempo != 0){
       if(control) num.value=0;// insere o valor zero para contagem progressiva
       else aux=num.value; //guarda o valor de  entrada em 'aux' para repetir a contagem regressiva como o mesmo valor
       let id=setInterval(function(){
           //console.log('tempo '+tempo);

               if (control){ // contagem progressiva
                   //num.value=aux;
                   ++aux;
                   num.value=aux;
                   if(tempo == aux) clearInterval(id);

               }else { // contagem regressiva
                   --tempo;
                   num.value = tempo;
                   if(tempo == 0) clearInterval(id);
               }

               //console.log(tempo)
       },1000);
   }else num.value=texto1;
}else num.value=texto2;

}

function mais(){  //defini contagem progressiva
control=true;
}

function menos() { // defini contagem regressiva,que é a default
control=false;
if(num.value == 0) num.value = aux;//insere o valor novamente para repetir contagem regressiva
}

function validacao(array,numero) {
if(array.length != 0){
   //verificar se a entrada é um número
   for (let i=0;i<array.length;i++){
   //verificar se o sinal de menos '-' é único ,e,é o primeiro caracter do valor entrado
       console.log(array.indexOf('-',i));
       if(array.indexOf('-',i) != 0){
           return false;
       }else{ // verificar os outros caracteres de entrada,que só podem ser números
           if(!numero.includes(array[i])){
               return false;
           }
       }
   }
}else return false;

return true; // retorna true se passar na validação
}


   //console.log(bol);
   //console.log(typeof(parseInt(num.value,10)));
//num.setAttribute("disable",true);
//num.removeAttribute("disable");

       //console.log(num.value);


   if(i!=0 & array[i] == '-'){
           return false;
       }else{ // verificar os outros caracteres de entrada,que só podem ser números
           if(!numero.includes(array[i])){
               return false;
           }
       }


indexOf:
const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];
console.log(beasts.indexOf('bison'));
Expected output: 1

Start from index 2 (inclusive)
console.log(beasts.indexOf('bison', 2))
*/

/*
   let a=str.length>0;
   let b=str.length==1;
   let c=str[0] =='-' || str[0]=='+';
   if( a&&!b || a&&!c) {
       for(let i=0;i<str.length;i++) {
           if(c && i==0) continue;
           if(!obj.algarism.includes(str[i])) {
               number=false;
               break;
           }
       }
   }else number=false;
   */